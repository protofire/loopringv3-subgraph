type Exchange @entity {
  id: ID!

  internalId: BigInt!

  proxyAddress: Bytes!

  implementationAddress: Bytes

  owner: Bytes!

  operator: Bytes!

  onChainDataAvailability: Boolean!

  exchangeStake: BigDecimal!

  exchangeStakeRaw: BigInt!

  protocolStake: BigDecimal!

  protocolStakeRaw: BigInt!

  totalExchangeStakeBurned: BigDecimal!

  totalExchangeStakeBurnedRaw: BigInt!

  totalExchangeStakeDeposited: BigDecimal!

  totalExchangeStakeDepositedRaw: BigInt!

  totalExchangeStakeWithdrawn: BigDecimal!

  totalExchangeStakeWithdrawnRaw: BigInt!

  totalProtocolStakeDeposited: BigDecimal!

  totalProtocolStakeDepositedRaw: BigInt!

  totalProtocolStakeWithdrawn: BigDecimal!

  totalProtocolStakeWithdrawnRaw: BigInt!

  accounts: [Account!]! @derivedFrom(field: "exchange")

  tokens: [Token!]! @derivedFrom(field: "exchange")
}

type Account @entity {
  id: ID!

  exchange: Exchange!

  internalId: Int!

  pubKeyX: BigInt!

  pubKeyY: BigInt!

  owner: User!
}

type Token @entity {
  id: ID!

  exchange: Exchange!

  internalId: Int!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!
}

type User @entity {
  id: ID!

  account: Account! @derivedFrom(field: "owner")

  lrcBalanceRaw: BigInt!

  lrcBalance: BigDecimal!

  lrcBurnedRaw: BigInt!

  lrcBurned: BigDecimal!
}

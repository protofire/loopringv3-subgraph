type Exchange @entity {
  "Address of the exchange"
  id: ID!

  "Internal ID of the exchange in the loopring protocol"
  internalId: BigInt!

  "Address of the proxy. It matches with the ID since exchanges use a proxy structure for upgrades"
  proxyAddress: Bytes!

  "Address of the implementation contract"
  implementationAddress: Bytes

  "AddressWhitelist contract address"
  addressWhitelist: Bytes

  "Ethereum address of the owner"
  owner: Bytes!

  "Ethereum address of the operator"
  operator: Bytes!

  "Whether or not this exchange has on chain data"
  onChainDataAvailability: Boolean!

  takerFeeBips: Int!

  makerFeeBips: Int!

  accountCreationFee: BigInt!

  accountUpdateFee: BigInt!

  depositFee: BigInt!

  withdrawalFee: BigInt!

  exchangeStake: BigDecimal!

  exchangeStakeRaw: BigInt!

  protocolStake: BigDecimal!

  protocolStakeRaw: BigInt!

  totalExchangeStakeBurned: BigDecimal!

  totalExchangeStakeBurnedRaw: BigInt!

  totalExchangeStakeDeposited: BigDecimal!

  totalExchangeStakeDepositedRaw: BigInt!

  totalExchangeStakeWithdrawn: BigDecimal!

  totalExchangeStakeWithdrawnRaw: BigInt!

  totalProtocolStakeDeposited: BigDecimal!

  totalProtocolStakeDepositedRaw: BigInt!

  totalProtocolStakeWithdrawn: BigDecimal!

  totalProtocolStakeWithdrawnRaw: BigInt!

  accounts: [Account!]! @derivedFrom(field: "exchange")

  tokens: [Token!]! @derivedFrom(field: "exchange")

  blocks: [Block!]! @derivedFrom(field: "exchange")

  transactionEvents: [OnChainTransactionEvent!]! @derivedFrom(field: "exchange")
}

interface OnChainTransactionEvent {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!
}

type DepositRequestedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!

  pubKeyY: BigInt!

  pubKeyX: BigInt!
}

type WithdrawalRequestedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!
}

type WithdrawalFailedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!

  to: Bytes!
}

type WithdrawalCompletedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!

  to: Bytes!
}

type Account @entity {
  "Exchange address + internal ID"
  id: ID!

  exchange: Exchange!

  "Internal ID of the account within the Exchange scope"
  internalId: Int!

  "X Value of the public key"
  pubKeyX: BigInt!

  "Y Value of the public key"
  pubKeyY: BigInt!

  "User that owns the account"
  owner: User!

  "List of balances for this account within the exchange"
  balances: [AccountTokenBalance!]! @derivedFrom(field: "account")

  transactionEvents: [OnChainTransactionEvent!]! @derivedFrom(field: "account")
}

type AccountTokenBalance @entity {
  "Exchange address + Account internal ID + token internal ID. Withdrawn amounts can be greater than deposits since tokens will be exchanged. We can't track trades as they are not part of the L1."
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  "Total amount of this token deposited to the account"
  totalDeposited: BigDecimal!

  totalDepositedRaw: BigInt!

  "Total amount of this token withdrawn from the account"
  totalWithdrawn: BigDecimal!

  totalWithdrawnRaw: BigInt!
}

type Token @entity {
  "Exchange Address + internal ID"
  id: ID!

  exchange: Exchange!

  "Internal ID of the token within the exchange"
  internalId: Int!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!

  transactionEvents: [OnChainTransactionEvent!]! @derivedFrom(field: "token")
}

type User @entity {
  "Ethereum address"
  id: ID!

  "Related Loopring account. Might not exist if the user only traded LRC but never used loopring."
  account: Account @derivedFrom(field: "owner")

  lrcBalanceRaw: BigInt!

  lrcBalance: BigDecimal!

  lrcBurnedRaw: BigInt!

  lrcBurned: BigDecimal!
}

enum BlockStatus {
  Committed, Verified, Reverted
}

type Block @entity {
  "Exchange ID + Block number"
  id: ID!

  exchange: Exchange!

  status: BlockStatus!

  publicDataHash: Bytes!

  feesWithdrawn: BigInt!

  merkleRoot: Bytes

  blockType: BlockType

  blockTypeRaw: Int

  blockSize: Int

  timestamp: BigInt

  numDepositRequestsCommitted: BigInt

  numWithdrawalRequestsCommitted: BigInt

  blockFeeWithdrawn: Boolean

  numWithdrawalsDistributed: Int
}

enum BlockType {
    RING_SETTLEMENT,
    DEPOSIT,
    ONCHAIN_WITHDRAWAL,
    OFFCHAIN_WITHDRAWAL,
    ORDER_CANCELLATION,
    TRANSFER
}

type Circuit @entity {
  id: ID!

  blockType: BlockType!

  blockTypeRaw: Int!

  onchainDataAvailability: Boolean!

  blockSize: Int!

  blockVersion: Int!

  enabled: Boolean!
}

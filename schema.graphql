type Exchange @entity {
  id: ID!

  internalId: BigInt!

  proxyAddress: Bytes!

  implementationAddress: Bytes

  addressWhitelist: Bytes

  owner: Bytes!

  operator: Bytes!

  onChainDataAvailability: Boolean!

  takerFeeBips: Int!

  makerFeeBips: Int!

  accountCreationFee: BigInt!

  accountUpdateFee: BigInt!

  depositFee: BigInt!

  withdrawalFee: BigInt!

  exchangeStake: BigDecimal!

  exchangeStakeRaw: BigInt!

  protocolStake: BigDecimal!

  protocolStakeRaw: BigInt!

  totalExchangeStakeBurned: BigDecimal!

  totalExchangeStakeBurnedRaw: BigInt!

  totalExchangeStakeDeposited: BigDecimal!

  totalExchangeStakeDepositedRaw: BigInt!

  totalExchangeStakeWithdrawn: BigDecimal!

  totalExchangeStakeWithdrawnRaw: BigInt!

  totalProtocolStakeDeposited: BigDecimal!

  totalProtocolStakeDepositedRaw: BigInt!

  totalProtocolStakeWithdrawn: BigDecimal!

  totalProtocolStakeWithdrawnRaw: BigInt!

  accounts: [Account!]! @derivedFrom(field: "exchange")

  tokens: [Token!]! @derivedFrom(field: "exchange")

  blocks: [Block!]! @derivedFrom(field: "exchange")
}

interface OnChainTransactionEvent {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!
}

type DepositRequestedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!

  pubKeyY: BigInt!

  pubKeyX: BigInt!
}

type WithdrawalRequestedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!
}

type WithdrawalFailedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!

  to: Bytes!
}

type WithdrawalCompletedEvent implements OnChainTransactionEvent @entity {
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  amount: BigInt!

  to: Bytes!
}

type Account @entity {
  "Exchange address + internal ID"
  id: ID!

  exchange: Exchange!

  internalId: Int!

  pubKeyX: BigInt!

  pubKeyY: BigInt!

  owner: User!

  balances: [AccountTokenBalance!]! @derivedFrom(field: "account")
}

type AccountTokenBalance @entity {
  "Exchange address + Account internal ID + token internal ID"
  id: ID!

  exchange: Exchange!

  account: Account!

  token: Token!

  balanceRaw: BigInt!

  totalDepositedRaw: BigInt!

  totalWithdrawnRaw: BigInt!
}

type Token @entity {
  "Exchange Address + internal ID"
  id: ID!

  exchange: Exchange!

  internalId: Int!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!
}

type User @entity {
  "Ethereum address"
  id: ID!

  account: Account! @derivedFrom(field: "owner")

  lrcBalanceRaw: BigInt!

  lrcBalance: BigDecimal!

  lrcBurnedRaw: BigInt!

  lrcBurned: BigDecimal!
}

enum BlockStatus {
  Committed, Verified, Reverted
}

type Block @entity {
  "Exchange ID + Block number"
  id: ID!

  exchange: Exchange!

  status: BlockStatus!

  publicDataHash: Bytes!

  feesWithdrawn: BigInt!

  merkleRoot: Bytes

  blockType: Int

  blockSize: Int

  timestamp: BigInt

  numDepositRequestsCommitted: BigInt

  numWithdrawalRequestsCommitted: BigInt

  blockFeeWithdrawn: Boolean

  numWithdrawalsDistributed: Int
}

enum BlockType {
    RING_SETTLEMENT,
    DEPOSIT,
    ONCHAIN_WITHDRAWAL,
    OFFCHAIN_WITHDRAWAL,
    ORDER_CANCELLATION,
    TRANSFER
}

type Circuit @entity {
  id: ID!

  blockType: BlockType!

  blockTypeRaw: Int!

  onchainDataAvailability: Boolean!

  blockSize: Int!

  blockVersion: Int!

  enabled: Boolean!
}
